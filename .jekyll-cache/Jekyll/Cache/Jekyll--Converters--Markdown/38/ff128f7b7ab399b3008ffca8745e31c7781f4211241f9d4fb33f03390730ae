I")<h2 id="deque">Deque</h2>

<p>Deque o <em>double-ended queue</em> es un contenedor tipo lista optimizado para agregar
o eliminar elementos. Algunos de los métodos implementados en los deques son:</p>

<ul>
  <li>append: insertar elemento a la derecha</li>
  <li>extend: insertar elementos de un iterador a la derecha</li>
  <li>pop: eliminar y retornar un elemento de la derecha</li>
  <li>appendleft: insertar a la izquierda</li>
  <li>extendleft: extender a la izquierda</li>
  <li>popleft: eliminar de la izquierda</li>
  <li>rotate(n): rotar <em>n</em> pasos a la derecha o a la izquierda si <em>n</em> es negativo</li>
  <li>reverse: invertir el orden <em>in-place</em></li>
</ul>

<h3 id="una-aplicación-trivial-el-cifrado-césar">Una aplicación trivial: el cifrado César</h3>
<div class="foto-center" align="center">
  <img src="/imagenes/CipherDisk.jpg" alt="caesar cipher" style="width: 100%;" />
  <figcaption></figcaption>
</div>

<p>Según la definición en <a href="https://es.wikipedia.org/wiki/Cifrado_C%C3%A9sar">Wikipedia</a>:</p>

<blockquote>
  <p>En criptografía, el cifrado César, también conocido como cifrado por desplazamiento, código de César o desplazamiento de César, es una de las técnicas de cifrado más simples y más usadas. Es un tipo de cifrado por sustitución en el que una letra en el texto original es reemplazada por otra letra que se encuentra un número fijo de posiciones más adelante en el alfabeto. Por ejemplo, con un desplazamiento de 3, la A sería sustituida por la D (situada 3 lugares a la derecha de la A), la B sería reemplazada por la E, etc. Este método debe su nombre a Julio César, que lo usaba para comunicarse con sus generales.</p>
</blockquote>

<p>Una forma de simular el movimiento manual de una rueda de cifrado César es usando <em>deque</em> der la siguiente forma:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="kn">import</span> <span class="nn">string</span>

<span class="k">def</span> <span class="nf">cifrado_cesar</span><span class="p">(</span><span class="n">texto</span><span class="p">,</span> <span class="n">desplazamiento</span><span class="p">):</span>
    <span class="s">""" Simula una rueda de cifrado Cesar """</span>
    <span class="n">alfabeto</span> <span class="o">=</span> <span class="n">deque</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_lowercase</span><span class="p">)</span>
    <span class="n">texto_cifrado</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">for</span> <span class="n">letra</span> <span class="ow">in</span> <span class="n">texto</span><span class="p">:</span>
        <span class="c1"># Ubicamos el índice de la letra original
</span>        <span class="n">indice</span> <span class="o">=</span> <span class="n">alfabeto</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">letra</span><span class="p">)</span>
        <span class="c1"># Rotamos el alfabeto
</span>        <span class="n">alfabeto</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">despalazamiento</span><span class="p">)</span>
        <span class="c1"># Obtenemos la nueva letra
</span>        <span class="n">nueva_letra</span> <span class="o">=</span> <span class="n">alfabeto</span><span class="p">[</span><span class="n">indice</span><span class="p">]</span>
        <span class="c1"># Restauramos el orden original del alfabeto
</span>        <span class="n">alfabeto</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="o">-</span><span class="n">despalazamiento</span><span class="p">)</span>
        <span class="n">texto_cifrado</span> <span class="o">+=</span> <span class="n">nueva_letra</span>
    <span class="k">return</span> <span class="n">texto_cifrado</span></code></pre></figure>

<h2 id="chainmap">ChainMap</h2>

<p>Permite almacenar múltiples diccionarios en un solo contenedor. Los diccionarios se guardan en una lista y son accesibles con métodos normales de diccionarios.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">ChainMap</span>

<span class="n">d1</span> <span class="o">=</span> <span class="p">{</span><span class="s">'uno'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'dos'</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="n">d2</span> <span class="o">=</span> <span class="p">{</span><span class="s">'tres'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'cuatro'</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>

<span class="n">d</span> <span class="o">=</span> <span class="n">ChainMap</span><span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="s">'cuatro'</span><span class="p">]</span>
<span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">maps</span>
<span class="p">[{</span><span class="s">'dos'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'uno'</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="s">'cuatro'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'tres'</span><span class="p">:</span> <span class="mi">3</span><span class="p">}]</span>

<span class="c1"># En caso de claves repetidas se extrae el primero en orden de aparición:
</span>
<span class="n">d3</span> <span class="o">=</span> <span class="p">{</span><span class="s">'usuario'</span><span class="p">:</span> <span class="s">'user1'</span><span class="p">,</span> <span class="s">'correo'</span><span class="p">:</span> <span class="s">'user1@gmail.com'</span><span class="p">}</span>
<span class="n">d4</span> <span class="o">=</span> <span class="p">{</span><span class="s">'usuario'</span><span class="p">:</span> <span class="s">'user2'</span><span class="p">,</span> <span class="s">'correo'</span><span class="p">:</span> <span class="s">'user2@gmail.com'</span><span class="p">}</span>

<span class="n">usuarios</span> <span class="o">=</span> <span class="n">ChainMap</span><span class="p">(</span><span class="n">d3</span><span class="p">,</span> <span class="n">d4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">usuarios</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'usuario'</span><span class="p">)</span>
<span class="n">user1</span></code></pre></figure>
:ET